package sk.apupo.shoppinglist.daos;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import sk.apupo.shoppinglist.daos.BasicEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BASIC_ENTITY.
*/
public class BasicEntityDao extends AbstractDao<BasicEntity, Void> {

    public static final String TABLENAME = "BASIC_ENTITY";

    /**
     * Properties of entity BasicEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property DeletedLogical = new Property(0, Boolean.class, "deletedLogical", false, "DELETED_LOGICAL");
    };


    public BasicEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BasicEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BASIC_ENTITY' (" + //
                "'DELETED_LOGICAL' INTEGER);"); // 0: deletedLogical
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BASIC_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BasicEntity entity) {
        stmt.clearBindings();
 
        Boolean deletedLogical = entity.getDeletedLogical();
        if (deletedLogical != null) {
            stmt.bindLong(1, deletedLogical ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public BasicEntity readEntity(Cursor cursor, int offset) {
        BasicEntity entity = new BasicEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0 // deletedLogical
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BasicEntity entity, int offset) {
        entity.setDeletedLogical(cursor.isNull(offset + 0) ? null : cursor.getShort(offset + 0) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(BasicEntity entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(BasicEntity entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
