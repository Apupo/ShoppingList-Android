package sk.apupo.shoppinglist.daos;

import sk.apupo.shoppinglist.daos.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table PRODUCT.
 */
public class Product {

    private String title;
    private String titleClean;
    private String mainGroup;
    private String subGroup;
    private String comodity;
    private String subComodity;
    private java.util.Date modificationDate;
    private Boolean inBasket;
    private long fk_category_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductDao myDao;

    private CategoryEntity categoryEntity;
    private Long categoryEntity__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public Product() {
    }

    public Product(String title, String titleClean, String mainGroup, String subGroup, String comodity, String subComodity, java.util.Date modificationDate, Boolean inBasket, long fk_category_id) {
        this.title = title;
        this.titleClean = titleClean;
        this.mainGroup = mainGroup;
        this.subGroup = subGroup;
        this.comodity = comodity;
        this.subComodity = subComodity;
        this.modificationDate = modificationDate;
        this.inBasket = inBasket;
        this.fk_category_id = fk_category_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductDao() : null;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public String getTitleClean() {
        return titleClean;
    }

    public void setTitleClean(String titleClean) {
        this.titleClean = titleClean;
    }

    public String getMainGroup() {
        return mainGroup;
    }

    public void setMainGroup(String mainGroup) {
        this.mainGroup = mainGroup;
    }

    public String getSubGroup() {
        return subGroup;
    }

    public void setSubGroup(String subGroup) {
        this.subGroup = subGroup;
    }

    public String getComodity() {
        return comodity;
    }

    public void setComodity(String comodity) {
        this.comodity = comodity;
    }

    public String getSubComodity() {
        return subComodity;
    }

    public void setSubComodity(String subComodity) {
        this.subComodity = subComodity;
    }

    public java.util.Date getModificationDate() {
        return modificationDate;
    }

    public void setModificationDate(java.util.Date modificationDate) {
        this.modificationDate = modificationDate;
    }

    public Boolean getInBasket() {
        return inBasket;
    }

    public void setInBasket(Boolean inBasket) {
        this.inBasket = inBasket;
    }

    public long getFk_category_id() {
        return fk_category_id;
    }

    public void setFk_category_id(long fk_category_id) {
        this.fk_category_id = fk_category_id;
    }

    /** To-one relationship, resolved on first access. */
    public CategoryEntity getCategoryEntity() {
        long __key = this.fk_category_id;
        if (categoryEntity__resolvedKey == null || !categoryEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CategoryEntityDao targetDao = daoSession.getCategoryEntityDao();
            CategoryEntity categoryEntityNew = targetDao.load(__key);
            synchronized (this) {
                categoryEntity = categoryEntityNew;
            	categoryEntity__resolvedKey = __key;
            }
        }
        return categoryEntity;
    }

    public void setCategoryEntity(CategoryEntity categoryEntity) {
        if (categoryEntity == null) {
            throw new DaoException("To-one property 'fk_category_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.categoryEntity = categoryEntity;
            fk_category_id = categoryEntity.getId();
            categoryEntity__resolvedKey = fk_category_id;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
